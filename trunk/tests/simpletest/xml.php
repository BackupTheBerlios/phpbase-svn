<?php
 require_once(dirname(__FILE__) . '/scorer.php'); class XmlReporter extends SimpleReporter { var $_indent; var $_namespace; function XmlReporter($namespace = false, $indent = '  ') { $this->SimpleReporter(); $this->_namespace = ($namespace ? $namespace . ':' : ''); $this->_indent = $indent; } function _getIndent($offset = 0) { return str_repeat( $this->_indent, count($this->getTestList()) + $offset); } function toParsedXml($text) { return str_replace( array('&', '<', '>', '"', '\''), array('&amp;', '&lt;', '&gt;', '&quot;', '&apos;'), $text); } function paintGroupStart($test_name, $size) { parent::paintGroupStart($test_name, $size); print $this->_getIndent(); print "<" . $this->_namespace . "group size=\"$size\">\n"; print $this->_getIndent(1); print "<" . $this->_namespace . "name>" . $this->toParsedXml($test_name) . "</" . $this->_namespace . "name>\n"; } function paintGroupEnd($test_name) { print $this->_getIndent(); print "</" . $this->_namespace . "group>\n"; parent::paintGroupEnd($test_name); } function paintCaseStart($test_name) { parent::paintCaseStart($test_name); print $this->_getIndent(); print "<" . $this->_namespace . "case>\n"; print $this->_getIndent(1); print "<" . $this->_namespace . "name>" . $this->toParsedXml($test_name) . "</" . $this->_namespace . "name>\n"; } function paintCaseEnd($test_name) { print $this->_getIndent(); print "</" . $this->_namespace . "case>\n"; parent::paintCaseEnd($test_name); } function paintMethodStart($test_name) { parent::paintMethodStart($test_name); print $this->_getIndent(); print "<" . $this->_namespace . "test>\n"; print $this->_getIndent(1); print "<" . $this->_namespace . "name>" . $this->toParsedXml($test_name) . "</" . $this->_namespace . "name>\n"; } function paintMethodEnd($test_name) { print $this->_getIndent(); print "</" . $this->_namespace . "test>\n"; parent::paintMethodEnd($test_name); } function paintPass($message) { parent::paintPass($message); print $this->_getIndent(1); print "<" . $this->_namespace . "pass>"; print $this->toParsedXml($message); print "</" . $this->_namespace . "pass>\n"; } function paintFail($message) { parent::paintFail($message); print $this->_getIndent(1); print "<" . $this->_namespace . "fail>"; print $this->toParsedXml($message); print "</" . $this->_namespace . "fail>\n"; } function paintException($message) { parent::paintException($message); print $this->_getIndent(1); print "<" . $this->_namespace . "exception>"; print $this->toParsedXml($message); print "</" . $this->_namespace . "exception>\n"; } function paintMessage($message) { parent::paintMessage($message); print $this->_getIndent(1); print "<" . $this->_namespace . "message>"; print $this->toParsedXml($message); print "</" . $this->_namespace . "message>\n"; } function paintFormattedMessage($message) { parent::paintFormattedMessage($message); print $this->_getIndent(1); print "<" . $this->_namespace . "formatted>"; print "<![CDATA[$message]]>"; print "</" . $this->_namespace . "formatted>\n"; } function paintSignal($type, &$payload) { parent::paintSignal($type, $payload); print $this->_getIndent(1); print "<" . $this->_namespace . "signal type=\"$type\">"; print "<![CDATA[" . serialize($payload) . "]]>"; print "</" . $this->_namespace . "signal>\n"; } function paintHeader($test_name) { if (! SimpleReporter::inCli()) { header('Content-type: text/xml'); } print "<?xml version=\"1.0\""; if ($this->_namespace) { print " xmlns:" . $this->_namespace . "=\"www.lastcraft.com/SimpleTest/Beta3/Report\""; } print "?>\n"; print "<" . $this->_namespace . "run>\n"; } function paintFooter($test_name) { print "</" . $this->_namespace . "run>\n"; } } class NestingXmlTag { var $_name; var $_attributes; function NestingXmlTag($attributes) { $this->_name = false; $this->_attributes = $attributes; } function setName($name) { $this->_name = $name; } function getName() { return $this->_name; } function _getAttributes() { return $this->_attributes; } } class NestingMethodTag extends NestingXmlTag { function NestingMethodTag($attributes) { $this->NestingXmlTag($attributes); } function paintStart(&$listener) { $listener->paintMethodStart($this->getName()); } function paintEnd(&$listener) { $listener->paintMethodEnd($this->getName()); } } class NestingCaseTag extends NestingXmlTag { function NestingCaseTag($attributes) { $this->NestingXmlTag($attributes); } function paintStart(&$listener) { $listener->paintCaseStart($this->getName()); } function paintEnd(&$listener) { $listener->paintCaseEnd($this->getName()); } } class NestingGroupTag extends NestingXmlTag { function NestingGroupTag($attributes) { $this->NestingXmlTag($attributes); } function paintStart(&$listener) { $listener->paintGroupStart($this->getName(), $this->getSize()); } function paintEnd(&$listener) { $listener->paintGroupEnd($this->getName()); } function getSize() { $attributes = $this->_getAttributes(); if (isset($attributes['SIZE'])) { return (integer)$attributes['SIZE']; } return 0; } } class SimpleTestXmlParser { var $_listener; var $_expat; var $_tag_stack; var $_in_content_tag; var $_content; var $_attributes; function SimpleTestXmlParser(&$listener) { $this->_listener = &$listener; $this->_expat = &$this->_createParser(); $this->_tag_stack = array(); $this->_in_content_tag = false; $this->_content = ''; $this->_attributes = array(); } function parse($chunk) { if (! xml_parse($this->_expat, $chunk)) { trigger_error('XML parse error with ' . xml_error_string(xml_get_error_code($this->_expat))); return false; } return true; } function &_createParser() { $expat = xml_parser_create(); xml_set_object($expat, $this); xml_set_element_handler($expat, '_startElement', '_endElement'); xml_set_character_data_handler($expat, '_addContent'); xml_set_default_handler($expat, '_default'); return $expat; } function _pushNestingTag($nested) { array_unshift($this->_tag_stack, $nested); } function &_getCurrentNestingTag() { return $this->_tag_stack[0]; } function _popNestingTag() { return array_shift($this->_tag_stack); } function _isLeaf($tag) { return in_array($tag, array( 'NAME', 'PASS', 'FAIL', 'EXCEPTION', 'MESSAGE', 'FORMATTED', 'SIGNAL')); } function _startElement($expat, $tag, $attributes) { $this->_attributes = $attributes; if ($tag == 'GROUP') { $this->_pushNestingTag(new NestingGroupTag($attributes)); } elseif ($tag == 'CASE') { $this->_pushNestingTag(new NestingCaseTag($attributes)); } elseif ($tag == 'TEST') { $this->_pushNestingTag(new NestingMethodTag($attributes)); } elseif ($this->_isLeaf($tag)) { $this->_in_content_tag = true; $this->_content = ''; } } function _endElement($expat, $tag) { $this->_in_content_tag = false; if (in_array($tag, array('GROUP', 'CASE', 'TEST'))) { $nesting_tag = $this->_popNestingTag(); $nesting_tag->paintEnd($this->_listener); } elseif ($tag == 'NAME') { $nesting_tag = &$this->_getCurrentNestingTag(); $nesting_tag->setName($this->_content); $nesting_tag->paintStart($this->_listener); } elseif ($tag == 'PASS') { $this->_listener->paintPass($this->_content); } elseif ($tag == 'FAIL') { $this->_listener->paintFail($this->_content); } elseif ($tag == 'EXCEPTION') { $this->_listener->paintException($this->_content); } elseif ($tag == 'SIGNAL') { $this->_listener->paintSignal( $this->_attributes['TYPE'], unserialize($this->_content)); } elseif ($tag == 'MESSAGE') { $this->_listener->paintMessage($this->_content); } elseif ($tag == 'FORMATTED') { $this->_listener->paintFormattedMessage($this->_content); } } function _addContent($expat, $text) { if ($this->_in_content_tag) { $this->_content .= $text; } return true; } function _default($expat, $default) { } } ?>
