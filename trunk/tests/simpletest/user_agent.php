<?php
 require_once(dirname(__FILE__) . '/http.php'); require_once(dirname(__FILE__) . '/encoding.php'); require_once(dirname(__FILE__) . '/authentication.php'); if (!defined('DEFAULT_MAX_REDIRECTS')) { define('DEFAULT_MAX_REDIRECTS', 3); } if (!defined('DEFAULT_CONNECTION_TIMEOUT')) { define('DEFAULT_CONNECTION_TIMEOUT', 15); } class SimpleCookieJar { var $_cookies; function SimpleCookieJar() { $this->_cookies = array(); } function restartSession($date = false) { $surviving_cookies = array(); for ($i = 0; $i < count($this->_cookies); $i++) { if (! $this->_cookies[$i]->getValue()) { continue; } if (! $this->_cookies[$i]->getExpiry()) { continue; } if ($date && $this->_cookies[$i]->isExpired($date)) { continue; } $surviving_cookies[] = $this->_cookies[$i]; } $this->_cookies = $surviving_cookies; } function agePrematurely($interval) { for ($i = 0; $i < count($this->_cookies); $i++) { $this->_cookies[$i]->agePrematurely($interval); } } function setCookie($cookie) { for ($i = 0; $i < count($this->_cookies); $i++) { $is_match = $this->_isMatch( $cookie, $this->_cookies[$i]->getHost(), $this->_cookies[$i]->getPath(), $this->_cookies[$i]->getName()); if ($is_match) { $this->_cookies[$i] = $cookie; return; } } $this->_cookies[] = $cookie; } function getValidCookies($host = false, $path = "/") { $valid_cookies = array(); foreach ($this->_cookies as $cookie) { if ($this->_isMatch($cookie, $host, $path, $cookie->getName())) { $valid_cookies[] = $cookie; } } return $valid_cookies; } function _isMatch($cookie, $host, $path, $name) { if ($cookie->getName() != $name) { return false; } if ($host && $cookie->getHost() && !$cookie->isValidHost($host)) { return false; } if (! $cookie->isValidPath($path)) { return false; } return true; } function addHeaders(&$request, $url) { $cookies = $this->getValidCookies($url->getHost(), $url->getPath()); foreach ($cookies as $cookie) { $request->setCookie($cookie); } } } class SimpleUserAgent { var $_cookie_jar; var $_authenticator; var $_max_redirects; var $_proxy; var $_proxy_username; var $_proxy_password; var $_connection_timeout; var $_additional_headers; function SimpleUserAgent() { $this->_cookie_jar = &new SimpleCookieJar(); $this->_authenticator = &new SimpleAuthenticator(); $this->setMaximumRedirects(DEFAULT_MAX_REDIRECTS); $this->_proxy = false; $this->_proxy_username = false; $this->_proxy_password = false; $this->setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT); $this->_additional_headers = array(); } function restart($date = false) { $this->_cookie_jar->restartSession($date); $this->_authenticator->restartSession(); } function addHeader($header) { $this->_additional_headers[] = $header; } function ageCookies($interval) { $this->_cookie_jar->agePrematurely($interval); } function setCookie($name, $value, $host = false, $path = '/', $expiry = false) { $cookie = new SimpleCookie($name, $value, $path, $expiry); if ($host) { $cookie->setHost($host); } $this->_cookie_jar->setCookie($cookie); } function getCookieValue($host, $path, $name) { $longest_path = ''; foreach ($this->_cookie_jar->getValidCookies($host, $path) as $cookie) { if ($name == $cookie->getName()) { if (strlen($cookie->getPath()) > strlen($longest_path)) { $value = $cookie->getValue(); $longest_path = $cookie->getPath(); } } } return (isset($value) ? $value : false); } function getBaseCookieValue($name, $base) { if (! $base) { return null; } return $this->getCookieValue($base->getHost(), $base->getPath(), $name); } function setConnectionTimeout($timeout) { $this->_connection_timeout = $timeout; } function setMaximumRedirects($max) { $this->_max_redirects = $max; } function useProxy($proxy, $username, $password) { if (! $proxy) { $this->_proxy = false; return; } if (strncmp($proxy, 'http://', 7) != 0) { $proxy = 'http://'. $proxy; } $this->_proxy = &new SimpleUrl($proxy); $this->_proxy_username = $username; $this->_proxy_password = $password; } function _isTooManyRedirects($redirects) { return ($redirects > $this->_max_redirects); } function setIdentity($host, $realm, $username, $password) { $this->_authenticator->setIdentityForRealm($host, $realm, $username, $password); } function &fetchResponse($url, $encoding) { if ($encoding->getMethod() != 'POST') { $url->addRequestParameters($encoding); $encoding->clear(); } $response = &$this->_fetchWhileRedirected($url, $encoding); if ($headers = $response->getHeaders()) { if ($headers->isChallenge()) { $this->_authenticator->addRealm( $url, $headers->getAuthentication(), $headers->getRealm()); } } return $response; } function &_fetchWhileRedirected($url, $encoding) { $redirects = 0; do { $response = &$this->_fetch($url, $encoding); if ($response->isError()) { return $response; } $headers = $response->getHeaders(); $location = new SimpleUrl($headers->getLocation()); $url = $location->makeAbsolute($url); $this->_addCookiesToJar($url, $headers->getNewCookies()); if (! $headers->isRedirect()) { break; } $encoding = new SimpleGetEncoding(); } while (! $this->_isTooManyRedirects(++$redirects)); return $response; } function &_fetch($url, $encoding) { $request = &$this->_createRequest($url, $encoding); $response = &$request->fetch($this->_connection_timeout); return $response; } function &_createRequest($url, $encoding) { $request = &$this->_createHttpRequest($url, $encoding); $this->_addAdditionalHeaders($request); $this->_cookie_jar->addHeaders($request, $url); $this->_authenticator->addHeaders($request, $url); return $request; } function &_createHttpRequest($url, $encoding) { $request = &new SimpleHttpRequest($this->_createRoute($url), $encoding); return $request; } function &_createRoute($url) { if ($this->_proxy) { $route = &new SimpleProxyRoute( $url, $this->_proxy, $this->_proxy_username, $this->_proxy_password); } else { $route = &new SimpleRoute($url); } return $route; } function _addAdditionalHeaders(&$request) { foreach ($this->_additional_headers as $header) { $request->addHeaderLine($header); } } function _addCookiesToJar($url, $cookies) { foreach ($cookies as $cookie) { if ($url->getHost()) { $cookie->setHost($url->getHost()); } $this->_cookie_jar->setCookie($cookie); } } } ?>