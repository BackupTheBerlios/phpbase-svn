<?php
 require_once(dirname(__FILE__) . '/errors.php'); require_once(dirname(__FILE__) . '/compatibility.php'); require_once(dirname(__FILE__) . '/scorer.php'); require_once(dirname(__FILE__) . '/expectation.php'); require_once(dirname(__FILE__) . '/dumper.php'); if (! defined('SIMPLE_TEST')) { define('SIMPLE_TEST', dirname(__FILE__) . '/'); } class SimpleInvoker { var $_test_case; function SimpleInvoker(&$test_case) { $this->_test_case = &$test_case; } function &getTestCase() { return $this->_test_case; } function invoke($method) { $this->_test_case->before($method); $this->_test_case->setUp(); $this->_test_case->$method(); $this->_test_case->tearDown(); $this->_test_case->after($method); } } class SimpleInvokerDecorator { var $_invoker; function SimpleInvokerDecorator(&$invoker) { $this->_invoker = &$invoker; } function &getTestCase() { return $this->_invoker->getTestCase(); } function invoke($method) { $this->_invoker->invoke($method); } } class SimpleErrorTrappingInvoker extends SimpleInvokerDecorator { function SimpleErrorTrappingInvoker(&$invoker) { $this->SimpleInvokerDecorator($invoker); } function invoke($method) { set_error_handler('simpleTestErrorHandler'); parent::invoke($method); $queue = &SimpleErrorQueue::instance(); while (list($severity, $message, $file, $line, $globals) = $queue->extract()) { $test_case = &$this->getTestCase(); $test_case->error($severity, $message, $file, $line, $globals); } restore_error_handler(); } } class SimpleRunner { var $_test_case; var $_scorer; function SimpleRunner(&$test_case, &$scorer) { $this->_test_case = &$test_case; $this->_scorer = &$scorer; } function &getTestCase() { return $this->_test_case; } function run() { $methods = get_class_methods(get_class($this->_test_case)); $invoker = &$this->_test_case->createInvoker(); foreach ($methods as $method) { if (! $this->_isTest($method)) { continue; } if ($this->_isConstructor($method)) { continue; } if ($this->_scorer->shouldInvoke($this->_test_case->getLabel(), $method)) { $invoker->invoke($method); } } } function _isConstructor($method) { return SimpleTestCompatibility::isA( $this->_test_case, strtolower($method)); } function _isTest($method) { return strtolower(substr($method, 0, 4)) == 'test'; } function paintMethodStart($test_name) { $this->_scorer->paintMethodStart($test_name); } function paintMethodEnd($test_name) { $this->_scorer->paintMethodEnd($test_name); } function paintPass($message) { $this->_scorer->paintPass($message); } function paintFail($message) { $this->_scorer->paintFail($message); } function paintError($message) { $this->_scorer->paintError($message); } function paintException($exception) { $this->_scorer->paintException($exception); } function paintMessage($message) { $this->_scorer->paintMessage($message); } function paintFormattedMessage($message) { $this->_scorer->paintFormattedMessage($message); } function paintSignal($type, &$payload) { $this->_scorer->paintSignal($type, $payload); } } ?>
