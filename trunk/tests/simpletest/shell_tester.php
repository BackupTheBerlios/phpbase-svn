<?php
 require_once(dirname(__FILE__) . '/test_case.php'); class SimpleShell { var $_output; function SimpleShell() { $this->_output = false; } function execute($command) { $this->_output = false; exec($command, $this->_output, $ret); return $ret; } function getOutput() { return implode("\n", $this->_output); } function getOutputAsList() { return $this->_output; } } class ShellTestCase extends SimpleTestCase { var $_current_shell; var $_last_status; var $_last_command; function ShellTestCase($label = false) { $this->SimpleTestCase($label); $this->_current_shell = &$this->_createShell(); $this->_last_status = false; $this->_last_command = ''; } function execute($command) { $shell = &$this->_getShell(); $this->_last_status = $shell->execute($command); $this->_last_command = $command; return ($this->_last_status === 0); } function dumpOutput() { $this->dump($this->getOutput()); } function getOutput() { $shell = &$this->_getShell(); return $shell->getOutput(); } function getOutputAsList() { $shell = &$this->_getShell(); return $shell->getOutputAsList(); } function assertEqual($first, $second, $message = "%s") { return $this->assert( new EqualExpectation($first), $second, $message); } function assertNotEqual($first, $second, $message = "%s") { return $this->assert( new NotEqualExpectation($first), $second, $message); } function assertExitCode($status, $message = "%s") { $message = sprintf($message, "Expected status code of [$status] from [" . $this->_last_command . "], but got [" . $this->_last_status . "]"); return $this->assertTrue($status === $this->_last_status, $message); } function assertOutput($expected, $message = "%s") { $shell = &$this->_getShell(); return $this->assert( new EqualExpectation($expected), $shell->getOutput(), $message); } function assertOutputPattern($pattern, $message = "%s") { $shell = &$this->_getShell(); return $this->assert( new PatternExpectation($pattern), $shell->getOutput(), $message); } function assertNoOutputPattern($pattern, $message = "%s") { $shell = &$this->_getShell(); return $this->assert( new NoPatternExpectation($pattern), $shell->getOutput(), $message); } function assertFileExists($path, $message = "%s") { $message = sprintf($message, "File [$path] should exist"); return $this->assertTrue(file_exists($path), $message); } function assertFileNotExists($path, $message = "%s") { $message = sprintf($message, "File [$path] should not exist"); return $this->assertFalse(file_exists($path), $message); } function assertFilePattern($pattern, $path, $message = "%s") { $shell = &$this->_getShell(); return $this->assert( new PatternExpectation($pattern), implode('', file($path)), $message); } function assertNoFilePattern($pattern, $path, $message = "%s") { $shell = &$this->_getShell(); return $this->assert( new NoPatternExpectation($pattern), implode('', file($path)), $message); } function &_getShell() { return $this->_current_shell; } function &_createShell() { $shell = &new SimpleShell(); return $shell; } } ?>