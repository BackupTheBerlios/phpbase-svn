<?php
 require_once(dirname(__FILE__) . '/http.php'); require_once(dirname(__FILE__) . '/parser.php'); require_once(dirname(__FILE__) . '/tag.php'); require_once(dirname(__FILE__) . '/form.php'); require_once(dirname(__FILE__) . '/selector.php'); class SimpleTagBuilder { function createTag($name, $attributes) { static $map = array( 'a' => 'SimpleAnchorTag', 'title' => 'SimpleTitleTag', 'button' => 'SimpleButtonTag', 'textarea' => 'SimpleTextAreaTag', 'option' => 'SimpleOptionTag', 'label' => 'SimpleLabelTag', 'form' => 'SimpleFormTag', 'frame' => 'SimpleFrameTag'); $attributes = $this->_keysToLowerCase($attributes); if (array_key_exists($name, $map)) { $tag_class = $map[$name]; return new $tag_class($attributes); } elseif ($name == 'select') { return $this->_createSelectionTag($attributes); } elseif ($name == 'input') { return $this->_createInputTag($attributes); } return new SimpleTag($name, $attributes); } function _createSelectionTag($attributes) { if (isset($attributes['multiple'])) { return new MultipleSelectionTag($attributes); } return new SimpleSelectionTag($attributes); } function _createInputTag($attributes) { if (! isset($attributes['type'])) { return new SimpleTextTag($attributes); } $type = strtolower(trim($attributes['type'])); $map = array( 'submit' => 'SimpleSubmitTag', 'image' => 'SimpleImageSubmitTag', 'checkbox' => 'SimpleCheckboxTag', 'radio' => 'SimpleRadioButtonTag', 'text' => 'SimpleTextTag', 'hidden' => 'SimpleTextTag', 'password' => 'SimpleTextTag', 'file' => 'SimpleUploadTag'); if (array_key_exists($type, $map)) { $tag_class = $map[$type]; return new $tag_class($attributes); } return false; } function _keysToLowerCase($map) { $lower = array(); foreach ($map as $key => $value) { $lower[strtolower($key)] = $value; } return $lower; } } class SimplePageBuilder extends SimpleSaxListener { var $_tags; var $_page; var $_in_option = false; function SimplePageBuilder() { $this->SimpleSaxListener(); } function &parse($response) { $this->_tags = array(); $this->_page = &$this->_createPage($response); $parser = &$this->_createParser($this); $parser->parse($response->getContent()); $this->_page->acceptPageEnd(); return $this->_page; } function &_createPage($response) { $page = &new SimplePage($response); return $page; } function &_createParser(&$listener) { $parser = &new SimpleSaxParser($listener); return $parser; } function startElement($name, $attributes) { $factory = &new SimpleTagBuilder(); $tag = $factory->createTag($name, $attributes); if (! $tag) { return true; } if ($tag->getTagName() == 'label') { $this->_page->acceptLabelStart($tag); $this->_openTag($tag); return true; } if ($tag->getTagName() == 'form') { $this->_page->acceptFormStart($tag); return true; } if ($tag->getTagName() == 'frameset') { $this->_page->acceptFramesetStart($tag); return true; } if ($tag->getTagName() == 'frame') { $this->_page->acceptFrame($tag); return true; } if ($tag->getTagName() == 'option') { $this->_in_option = true; } if ($tag->expectEndTag()) { $this->_openTag($tag); return true; } $this->_page->acceptTag($tag); return true; } function endElement($name) { if ($name == 'label') { $this->_page->acceptLabelEnd(); return true; } if ($name == 'form') { $this->_page->acceptFormEnd(); return true; } if ($name == 'frameset') { $this->_page->acceptFramesetEnd(); return true; } if ($name == 'option') { $this->_in_option = false; } if ($this->_hasNamedTagOnOpenTagStack($name)) { $tag = array_pop($this->_tags[$name]); $this->_addContentTagToOpenTags($tag); $this->_page->acceptTag($tag); return true; } return true; } function _hasNamedTagOnOpenTagStack($name) { return isset($this->_tags[$name]) && (count($this->_tags[$name]) > 0); } function addContent($text) { if ($this->_in_option) { $this->_addContentToOptionTag($text); } else { $this->_addContentToAllOpenTags($text); } return true; } function _addContentToOptionTag($text) { $current = count($this->_tags['option']) - 1; $this->_tags['option'][$current]->addContent($text); } function _addContentToAllOpenTags($text) { foreach (array_keys($this->_tags) as $name) { for ($i = 0, $count = count($this->_tags[$name]); $i < $count; $i++) { $this->_tags[$name][$i]->addContent($text); } } } function _addContentTagToOpenTags(&$tag) { if ($tag->getTagName() != 'option') { return; } foreach (array_keys($this->_tags) as $name) { for ($i = 0, $count = count($this->_tags[$name]); $i < $count; $i++) { $this->_tags[$name][$i]->addTag($tag); } } } function _openTag(&$tag) { $name = $tag->getTagName(); if (! in_array($name, array_keys($this->_tags))) { $this->_tags[$name] = array(); } $this->_tags[$name][] = &$tag; } } class SimplePage { var $_links; var $_title; var $_last_widget; var $_label; var $_left_over_labels; var $_open_forms; var $_complete_forms; var $_frameset; var $_frames; var $_frameset_nesting_level; var $_transport_error; var $_raw; var $_text; var $_sent; var $_headers; var $_method; var $_url; var $_request_data; function SimplePage($response = false) { $this->_links = array(); $this->_title = false; $this->_left_over_labels = array(); $this->_open_forms = array(); $this->_complete_forms = array(); $this->_frameset = false; $this->_frames = array(); $this->_frameset_nesting_level = 0; $this->_text = false; if ($response) { $this->_extractResponse($response); } else { $this->_noResponse(); } } function _extractResponse($response) { $this->_transport_error = $response->getError(); $this->_raw = $response->getContent(); $this->_sent = $response->getSent(); $this->_headers = $response->getHeaders(); $this->_method = $response->getMethod(); $this->_url = $response->getUrl(); $this->_request_data = $response->getRequestData(); } function _noResponse() { $this->_transport_error = 'No page fetched yet'; $this->_raw = false; $this->_sent = false; $this->_headers = false; $this->_method = 'GET'; $this->_url = false; $this->_request_data = false; } function getRequest() { return $this->_sent; } function getRaw() { return $this->_raw; } function getText() { if (! $this->_text) { $this->_text = SimpleSaxParser::normalise($this->_raw); } return $this->_text; } function getHeaders() { if ($this->_headers) { return $this->_headers->getRaw(); } return false; } function getMethod() { return $this->_method; } function getUrl() { return $this->_url; } function getRequestData() { return $this->_request_data; } function getTransportError() { return $this->_transport_error; } function getMimeType() { if ($this->_headers) { return $this->_headers->getMimeType(); } return false; } function getResponseCode() { if ($this->_headers) { return $this->_headers->getResponseCode(); } return false; } function getAuthentication() { if ($this->_headers) { return $this->_headers->getAuthentication(); } return false; } function getRealm() { if ($this->_headers) { return $this->_headers->getRealm(); } return false; } function getFrameFocus() { return array(); } function setFrameFocusByIndex($choice) { return false; } function setFrameFocus($name) { return false; } function clearFrameFocus() { } function acceptTag(&$tag) { if ($tag->getTagName() == "a") { $this->_addLink($tag); } elseif ($tag->getTagName() == "title") { $this->_setTitle($tag); } elseif ($this->_isFormElement($tag->getTagName())) { for ($i = 0; $i < count($this->_open_forms); $i++) { $this->_open_forms[$i]->addWidget($tag); } $this->_last_widget = &$tag; } } function acceptLabelStart(&$tag) { $this->_label = &$tag; unset($this->_last_widget); } function acceptLabelEnd() { if (isset($this->_label)) { if (isset($this->_last_widget)) { $this->_last_widget->setLabel($this->_label->getText()); unset($this->_last_widget); } else { $this->_left_over_labels[] = SimpleTestCompatibility::copy($this->_label); } unset($this->_label); } } function _isFormElement($name) { return in_array($name, array('input', 'button', 'textarea', 'select')); } function acceptFormStart(&$tag) { $this->_open_forms[] = &new SimpleForm($tag, $this->getUrl()); } function acceptFormEnd() { if (count($this->_open_forms)) { $this->_complete_forms[] = array_pop($this->_open_forms); } } function acceptFramesetStart(&$tag) { if (! $this->_isLoadingFrames()) { $this->_frameset = &$tag; } $this->_frameset_nesting_level++; } function acceptFramesetEnd() { if ($this->_isLoadingFrames()) { $this->_frameset_nesting_level--; } } function acceptFrame(&$tag) { if ($this->_isLoadingFrames()) { if ($tag->getAttribute('src')) { $this->_frames[] = &$tag; } } } function _isLoadingFrames() { if (! $this->_frameset) { return false; } return ($this->_frameset_nesting_level > 0); } function _linkIsAbsolute($url) { $parsed = new SimpleUrl($url); return (boolean)($parsed->getScheme() && $parsed->getHost()); } function _addLink($tag) { $this->_links[] = $tag; } function acceptPageEnd() { while (count($this->_open_forms)) { $this->_complete_forms[] = array_pop($this->_open_forms); } foreach ($this->_left_over_labels as $label) { for ($i = 0, $count = count($this->_complete_forms); $i < $count; $i++) { $this->_complete_forms[$i]->attachLabelBySelector( new SimpleById($label->getFor()), $label->getText()); } } } function hasFrames() { return (boolean)$this->_frameset; } function getFrameset() { if (! $this->_frameset) { return false; } $urls = array(); for ($i = 0; $i < count($this->_frames); $i++) { $name = $this->_frames[$i]->getAttribute('name'); $url = new SimpleUrl($this->_frames[$i]->getAttribute('src')); $urls[$name ? $name : $i + 1] = $url->makeAbsolute($this->getUrl()); } return $urls; } function getFrames() { $url = $this->getUrl(); return $url->asString(); } function getAbsoluteUrls() { $all = array(); foreach ($this->_links as $link) { if ($this->_linkIsAbsolute($link->getHref())) { $all[] = $link->getHref(); } } return $all; } function getRelativeUrls() { $all = array(); foreach ($this->_links as $link) { if (! $this->_linkIsAbsolute($link->getHref())) { $all[] = $link->getHref(); } } return $all; } function getUrlsByLabel($label) { $matches = array(); foreach ($this->_links as $link) { if ($link->getText() == $label) { $matches[] = $this->_getUrlFromLink($link); } } return $matches; } function getUrlById($id) { foreach ($this->_links as $link) { if ($link->getAttribute('id') === (string)$id) { return $this->_getUrlFromLink($link); } } return false; } function _getUrlFromLink($link) { $url = $this->_makeAbsolute($link->getHref()); if ($link->getAttribute('target')) { $url->setTarget($link->getAttribute('target')); } return $url; } function _makeAbsolute($url) { if (! is_object($url)) { $url = new SimpleUrl($url); } return $url->makeAbsolute($this->getUrl()); } function _setTitle(&$tag) { $this->_title = &$tag; } function getTitle() { if ($this->_title) { return $this->_title->getText(); } return false; } function &getFormBySubmit($selector) { for ($i = 0; $i < count($this->_complete_forms); $i++) { if ($this->_complete_forms[$i]->hasSubmit($selector)) { return $this->_complete_forms[$i]; } } $null = null; return $null; } function &getFormByImage($selector) { for ($i = 0; $i < count($this->_complete_forms); $i++) { if ($this->_complete_forms[$i]->hasImage($selector)) { return $this->_complete_forms[$i]; } } $null = null; return $null; } function &getFormById($id) { for ($i = 0; $i < count($this->_complete_forms); $i++) { if ($this->_complete_forms[$i]->getId() == $id) { return $this->_complete_forms[$i]; } } $null = null; return $null; } function setField($selector, $value) { $is_set = false; for ($i = 0; $i < count($this->_complete_forms); $i++) { if ($this->_complete_forms[$i]->setField($selector, $value)) { $is_set = true; } } return $is_set; } function getField($selector) { for ($i = 0; $i < count($this->_complete_forms); $i++) { $value = $this->_complete_forms[$i]->getValue($selector); if (isset($value)) { return $value; } } return null; } } ?>
