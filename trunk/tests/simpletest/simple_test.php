<?php
 require_once(dirname(__FILE__) . '/errors.php'); require_once(dirname(__FILE__) . '/options.php'); require_once(dirname(__FILE__) . '/runner.php'); require_once(dirname(__FILE__) . '/scorer.php'); require_once(dirname(__FILE__) . '/expectation.php'); require_once(dirname(__FILE__) . '/dumper.php'); if (! defined('SIMPLE_TEST')) { define('SIMPLE_TEST', dirname(__FILE__) . '/'); } class SimpleTestCase { var $_label; var $_runner; function SimpleTestCase($label = false) { $this->_label = $label ? $label : get_class($this); $this->_runner = false; } function getLabel() { return $this->_label; } function &createInvoker() { $invoker =& new SimpleErrorTrappingInvoker(new SimpleInvoker($this)); return $invoker; } function &_createRunner(&$reporter) { $runner =& new SimpleRunner($this, $reporter); return $runner; } function run(&$reporter) { $reporter->paintCaseStart($this->getLabel()); $this->_runner = &$this->_createRunner($reporter); $this->_runner->run(); $reporter->paintCaseEnd($this->getLabel()); return $reporter->getStatus(); } function setUp() { } function tearDown() { } function pass($message = "Pass") { $this->_runner->paintPass($message . $this->getAssertionLine(' at line [%d]')); } function fail($message = "Fail") { $this->_runner->paintFail($message . $this->getAssertionLine(' at line [%d]')); } function error($severity, $message, $file, $line, $globals) { $severity = SimpleErrorQueue::getSeverityAsString($severity); $this->_runner->paintError( "Unexpected PHP error [$message] severity [$severity] in [$file] line [$line]"); } function signal($type, &$payload) { $this->_runner->paintSignal($type, $payload); } function swallowErrors() { $queue = &SimpleErrorQueue::instance(); $queue->clear(); } function assertExpectation(&$expectation, $test_value, $message = '%s') { return $this->assertTrue( $expectation->test($test_value), sprintf($message, $expectation->overlayMessage($test_value))); } function assertTrue($result, $message = false) { if (! $message) { $message = 'True assertion got ' . ($result ? 'True' : 'False'); } if ($result) { $this->pass($message); return true; } else { $this->fail($message); return false; } } function assertFalse($result, $message = false) { if (! $message) { $message = 'False assertion got ' . ($result ? 'True' : 'False'); } return $this->assertTrue(! $result, $message); } function getAssertionLine($format = '%d', $stack = false) { if ($stack === false) { $stack = SimpleTestCompatibility::getStackTrace(); } return SimpleDumper::getFormattedAssertionLine($stack, $format); } function dump($variable, $message = false) { $formatted = SimpleDumper::dump($variable); if ($message) { $formatted = $message . "\n" . $formatted; } $this->_runner->paintFormattedMessage($formatted); return $variable; } function sendMessage($message) { $this->_runner->PaintMessage($message); } function getSize() { return 1; } } class GroupTest { var $_label; var $_test_cases; var $_old_track_errors; var $_xdebug_is_enabled; function GroupTest($label) { $this->_label = $label; $this->_test_cases = array(); $this->_old_track_errors = ini_get('track_errors'); $this->_xdebug_is_enabled = function_exists('xdebug_is_enabled') ? xdebug_is_enabled() : false; } function getLabel() { return $this->_label; } function addTestCase(&$test_case) { $this->_test_cases[] = &$test_case; } function addTestClass($class) { $this->_test_cases[] = $class; } function addTestFile($test_file) { $existing_classes = get_declared_classes(); if ($error = $this->_requireWithError($test_file)) { $this->addTestCase(new BadGroupTest($test_file, $error)); return; } $classes = $this->_selectRunnableTests($existing_classes, get_declared_classes()); if (count($classes) == 0) { $this->addTestCase(new BadGroupTest($test_file, 'No new test cases')); return; } $this->addTestCase($this->_createGroupFromClasses($test_file, $classes)); } function _requireWithError($file) { $this->_enableErrorReporting(); include($file); $error = isset($php_errormsg) ? $php_errormsg : false; $this->_disableErrorReporting(); $self_inflicted = array( 'Assigning the return value of new by reference is deprecated', 'var: Deprecated. Please use the public/private/protected modifiers'); if (in_array($error, $self_inflicted)) { return false; } return $error; } function _enableErrorReporting() { if ($this->_xdebug_is_enabled) { xdebug_disable(); } ini_set('track_errors', true); } function _disableErrorReporting() { ini_set('track_errors', $this->_old_track_errors); if ($this->_xdebug_is_enabled) { xdebug_enable(); } } function _selectRunnableTests($existing_classes, $new_classes) { $classes = array(); foreach ($new_classes as $class) { if (in_array($class, $existing_classes)) { continue; } if (! $this->_isTestCase($class)) { continue; } $classes[] = $class; } return $classes; } function _createGroupFromClasses($title, $classes) { $group = new GroupTest($title); foreach ($classes as $class) { if (SimpleTestOptions::isIgnored($class)) { continue; } $group->addTestClass($class); } return $group; } function _isTestCase($class) { while ($class = get_parent_class($class)) { $class = strtolower($class); if ($class == "simpletestcase" || $class == "grouptest") { return true; } } return false; } function run(&$reporter) { $reporter->paintGroupStart($this->getLabel(), $this->getSize()); for ($i = 0, $count = count($this->_test_cases); $i < $count; $i++) { if (is_string($this->_test_cases[$i])) { $class = $this->_test_cases[$i]; $test = &new $class(); $test->run($reporter); } else { $this->_test_cases[$i]->run($reporter); } } $reporter->paintGroupEnd($this->getLabel()); return $reporter->getStatus(); } function getSize() { $count = 0; foreach ($this->_test_cases as $case) { if (is_string($case)) { $count++; } else { $count += $case->getSize(); } } return $count; } } class BadGroupTest { var $_label; var $_error; function BadGroupTest($label, $error) { $this->_label = $label; $this->_error = $error; } function getLabel() { return $this->_label; } function run(&$reporter) { $reporter->paintGroupStart($this->getLabel(), $this->getSize()); $reporter->paintFail('Bad GroupTest [' . $this->getLabel() . '] with error [' . $this->_error . ']'); $reporter->paintGroupEnd($this->getLabel()); return $reporter->getStatus(); } function getSize() { return 0; } } ?>
