<?php
 require_once(dirname(__FILE__) . '/../dumper.php'); require_once(dirname(__FILE__) . '/../compatibility.php'); require_once(dirname(__FILE__) . '/../test_case.php'); require_once(dirname(__FILE__) . '/../expectation.php'); class PHPUnit_TestCase extends SimpleTestCase { var $_loosely_typed; function PHPUnit_TestCase($label = false) { $this->SimpleTestCase($label); $this->_loosely_typed = false; } function assertEquals($first, $second, $message = "%s", $delta = 0) { if ($this->_loosely_typed) { $expectation = &new EqualExpectation($first); } else { $expectation = &new IdenticalExpectation($first); } $this->assert($expectation, $second, $message); } function assertNotNull($value, $message = "%s") { parent::assertTrue(isset($value), $message); } function assertNull($value, $message = "%s") { parent::assertTrue(!isset($value), $message); } function assertSame(&$first, &$second, $message = "%s") { $dumper = &new SimpleDumper(); $message = sprintf( $message, "[" . $dumper->describeValue($first) . "] and [" . $dumper->describeValue($second) . "] should reference the same object"); return $this->assertTrue( SimpleTestCompatibility::isReference($first, $second), $message); } function assertNotSame(&$first, &$second, $message = "%s") { $dumper = &new SimpleDumper(); $message = sprintf( $message, "[" . $dumper->describeValue($first) . "] and [" . $dumper->describeValue($second) . "] should not be the same object"); return $this->assertFalse( SimpleTestCompatibility::isReference($first, $second), $message); } function assertTrue($condition, $message = "%s") { parent::assertTrue($condition, $message); } function assertFalse($condition, $message = "%s") { parent::assertTrue(!$condition, $message); } function assertRegExp($pattern, $subject, $message = "%s") { $this->assert(new PatternExpectation($pattern), $subject, $message); } function assertType($value, $type, $message = "%s") { parent::assertTrue(gettype($value) == strtolower($type), $message); } function setLooselyTyped($loosely_typed) { $this->_loosely_typed = $loosely_typed; } function countTestCases() { return $this->getSize(); } function getName() { return $this->getLabel(); } function setName($name) { } } ?>
