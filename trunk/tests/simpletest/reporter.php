<?php
 require_once(dirname(__FILE__) . '/scorer.php'); class HtmlReporter extends SimpleReporter { var $_character_set; function HtmlReporter($character_set = 'ISO-8859-1') { $this->SimpleReporter(); $this->_character_set = $character_set; } function paintHeader($test_name) { $this->sendNoCacheHeaders(); print "<html>\n<head>\n<title>$test_name</title>\n"; print "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=" . $this->_character_set . "\">\n"; print "<style type=\"text/css\">\n"; print $this->_getCss() . "\n"; print "</style>\n"; print "</head>\n<body>\n"; print "<h1>$test_name</h1>\n"; flush(); } function sendNoCacheHeaders() { if (! headers_sent()) { header("Expires: Mon, 26 Jul 1997 05:00:00 GMT"); header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT"); header("Cache-Control: no-store, no-cache, must-revalidate"); header("Cache-Control: post-check=0, pre-check=0", false); header("Pragma: no-cache"); } } function _getCss() { return ".fail { color: red; } pre { background-color: lightgray; }"; } function paintFooter($test_name) { $colour = ($this->getFailCount() + $this->getExceptionCount() > 0 ? "red" : "green"); print "<div style=\""; print "padding: 8px; margin-top: 1em; background-color: $colour; color: white;"; print "\">"; print $this->getTestCaseProgress() . "/" . $this->getTestCaseCount(); print " test cases complete:\n"; print "<strong>" . $this->getPassCount() . "</strong> passes, "; print "<strong>" . $this->getFailCount() . "</strong> fails and "; print "<strong>" . $this->getExceptionCount() . "</strong> exceptions."; print "</div>\n"; print "</body>\n</html>\n"; } function paintFail($message) { parent::paintFail($message); print "<span class=\"fail\">Fail</span>: "; $breadcrumb = $this->getTestList(); array_shift($breadcrumb); print implode(" -&gt; ", $breadcrumb); print " -&gt; " . $this->_htmlEntities($message) . "<br />\n"; } function paintException($message) { parent::paintException($message); print "<span class=\"fail\">Exception</span>: "; $breadcrumb = $this->getTestList(); array_shift($breadcrumb); print implode(" -&gt; ", $breadcrumb); print " -&gt; <strong>" . $this->_htmlEntities($message) . "</strong><br />\n"; } function paintFormattedMessage($message) { print '<pre>' . $this->_htmlEntities($message) . '</pre>'; } function _htmlEntities($message) { return htmlentities($message, ENT_COMPAT, $this->_character_set); } } class TextReporter extends SimpleReporter { function TextReporter() { $this->SimpleReporter(); } function paintHeader($test_name) { if (! SimpleReporter::inCli()) { header('Content-type: text/plain'); } print "$test_name\n"; flush(); } function paintFooter($test_name) { if ($this->getFailCount() + $this->getExceptionCount() == 0) { print "OK\n"; } else { print "FAILURES!!!\n"; } print "Test cases run: " . $this->getTestCaseProgress() . "/" . $this->getTestCaseCount() . ", Passes: " . $this->getPassCount() . ", Failures: " . $this->getFailCount() . ", Exceptions: " . $this->getExceptionCount() . "\n"; } function paintFail($message) { parent::paintFail($message); print $this->getFailCount() . ") $message\n"; $breadcrumb = $this->getTestList(); array_shift($breadcrumb); print "\tin " . implode("\n\tin ", array_reverse($breadcrumb)); print "\n"; } function paintException($message) { parent::paintException($message); print "Exception " . $this->getExceptionCount() . "!\n$message\n"; } function paintFormattedMessage($message) { print "$message\n"; flush(); } } ?>
