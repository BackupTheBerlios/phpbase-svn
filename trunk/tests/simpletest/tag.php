<?php
 require_once(dirname(__FILE__) . '/parser.php'); require_once(dirname(__FILE__) . '/encoding.php'); class SimpleTag { var $_name; var $_attributes; var $_content; function SimpleTag($name, $attributes) { $this->_name = strtolower(trim($name)); $this->_attributes = $attributes; $this->_content = ''; } function expectEndTag() { return true; } function addContent($content) { $this->_content .= (string)$content; } function addTag(&$tag) { } function getTagName() { return $this->_name; } function getChildElements() { return array(); } function getAttribute($label) { $label = strtolower($label); if (! isset($this->_attributes[$label])) { return false; } if ($this->_attributes[$label] === '') { return true; } return (string)$this->_attributes[$label]; } function _setAttribute($label, $value) { $this->_attributes[strtolower($label)] = $value; } function getContent() { return $this->_content; } function getText() { return SimpleSaxParser::normalise($this->_content); } function isId($id) { return ($this->getAttribute('id') == $id); } } class SimpleTitleTag extends SimpleTag { function SimpleTitleTag($attributes) { $this->SimpleTag('title', $attributes); } } class SimpleAnchorTag extends SimpleTag { function SimpleAnchorTag($attributes) { $this->SimpleTag('a', $attributes); } function getHref() { $url = $this->getAttribute('href'); if (is_bool($url)) { $url = ''; } return $url; } } class SimpleWidget extends SimpleTag { var $_value; var $_label; var $_is_set; function SimpleWidget($name, $attributes) { $this->SimpleTag($name, $attributes); $this->_value = false; $this->_label = false; $this->_is_set = false; } function getName() { return $this->getAttribute('name'); } function getDefault() { $default = $this->getAttribute('value'); if ($default === true) { $default = ''; } if ($default === false) { $default = ''; } return $default; } function getValue() { if (! $this->_is_set) { return $this->getDefault(); } return $this->_value; } function setValue($value) { $this->_value = $value; $this->_is_set = true; return true; } function resetValue() { $this->_is_set = false; } function setLabel($label) { $this->_label = trim($label); } function isLabel($label) { return $this->_label == trim($label); } function write(&$encoding) { $encoding->add($this->getName(), $this->getValue()); } } class SimpleTextTag extends SimpleWidget { function SimpleTextTag($attributes) { $this->SimpleWidget('input', $attributes); if ($this->getAttribute('value') === false) { $this->_setAttribute('value', ''); } } function expectEndTag() { return false; } function setValue($value) { if ($this->getAttribute('type') == 'hidden') { return false; } return parent::setValue($value); } } class SimpleSubmitTag extends SimpleWidget { function SimpleSubmitTag($attributes) { $this->SimpleWidget('input', $attributes); if ($this->getAttribute('name') === false) { $this->_setAttribute('name', 'submit'); } if ($this->getAttribute('value') === false) { $this->_setAttribute('value', 'Submit'); } } function expectEndTag() { return false; } function setValue($value) { return false; } function getLabel() { return $this->getValue(); } function isLabel($label) { return trim($label) == trim($this->getLabel()); } function getSubmitValues() { return array($this->getName() => $this->getValue()); } } class SimpleImageSubmitTag extends SimpleWidget { function SimpleImageSubmitTag($attributes) { $this->SimpleWidget('input', $attributes); } function expectEndTag() { return false; } function setValue($value) { return false; } function getLabel() { if ($this->getAttribute('title')) { return $this->getAttribute('title'); } return $this->getAttribute('alt'); } function isLabel($label) { return trim($label) == trim($this->getLabel()); } function getSubmitValues($x, $y) { return array( $this->getName() . '.x' => $x, $this->getName() . '.y' => $y); } } class SimpleButtonTag extends SimpleWidget { function SimpleButtonTag($attributes) { $this->SimpleWidget('button', $attributes); } function expectEndTag() { return true; } function setValue($value) { return false; } function getLabel() { return $this->getContent(); } function isLabel($label) { return trim($label) == trim($this->getLabel()); } function getSubmitValues() { if ($this->getAttribute('name') === false) { return array(); } if ($this->getAttribute('value') === false) { return array($this->getName() => ''); } return array($this->getName() => $this->getValue()); } } class SimpleTextAreaTag extends SimpleWidget { function SimpleTextAreaTag($attributes) { $this->SimpleWidget('textarea', $attributes); } function getDefault() { if ($this->_wrapIsEnabled()) { return wordwrap( $this->getContent(), (integer)$this->getAttribute('cols'), "\n"); } return $this->getContent(); } function setValue($value) { if ($this->_wrapIsEnabled()) { $value = wordwrap( $value, (integer)$this->getAttribute('cols'), "\n"); } return parent::setValue($value); } function _wrapIsEnabled() { if ($this->getAttribute('cols')) { $wrap = $this->getAttribute('wrap'); if (($wrap == 'physical') || ($wrap == 'hard')) { return true; } } return false; } } class SimpleUploadTag extends SimpleWidget { function SimpleUploadTag($attributes) { $this->SimpleWidget('input', $attributes); } function expectEndTag() { return false; } function write(&$encoding) { if (! file_exists($this->getValue())) { return; } $encoding->attach( $this->getName(), implode('', file($this->getValue())), basename($this->getValue())); } } class SimpleCheckboxTag extends SimpleWidget { function SimpleCheckboxTag($attributes) { $this->SimpleWidget('input', $attributes); if ($this->getAttribute('value') === false) { $this->_setAttribute('value', 'on'); } } function expectEndTag() { return false; } function setValue($value) { if ($value === false) { return parent::setValue($value); } if ($value != $this->getAttribute('value')) { return false; } return parent::setValue($value); } function getDefault() { if ($this->getAttribute('checked')) { return $this->getAttribute('value'); } return false; } } class SimpleSelectionTag extends SimpleWidget { var $_options; var $_choice; function SimpleSelectionTag($attributes) { $this->SimpleWidget('select', $attributes); $this->_options = array(); $this->_choice = false; } function addTag(&$tag) { if ($tag->getTagName() == 'option') { $this->_options[] = &$tag; } } function addContent($content) { } function getDefault() { for ($i = 0, $count = count($this->_options); $i < $count; $i++) { if ($this->_options[$i]->getAttribute('selected')) { return $this->_options[$i]->getDefault(); } } if ($count > 0) { return $this->_options[0]->getDefault(); } return ''; } function setValue($value) { for ($i = 0, $count = count($this->_options); $i < $count; $i++) { if ($this->_options[$i]->isValue($value)) { $this->_choice = $i; return true; } } return false; } function getValue() { if ($this->_choice === false) { return $this->getDefault(); } return $this->_options[$this->_choice]->getValue(); } } class MultipleSelectionTag extends SimpleWidget { var $_options; var $_values; function MultipleSelectionTag($attributes) { $this->SimpleWidget('select', $attributes); $this->_options = array(); $this->_values = false; } function addTag(&$tag) { if ($tag->getTagName() == 'option') { $this->_options[] = &$tag; } } function addContent($content) { } function getDefault() { $default = array(); for ($i = 0, $count = count($this->_options); $i < $count; $i++) { if ($this->_options[$i]->getAttribute('selected')) { $default[] = $this->_options[$i]->getDefault(); } } return $default; } function setValue($desired) { $achieved = array(); foreach ($desired as $value) { $success = false; for ($i = 0, $count = count($this->_options); $i < $count; $i++) { if ($this->_options[$i]->isValue($value)) { $achieved[] = $this->_options[$i]->getValue(); $success = true; break; } } if (! $success) { return false; } } $this->_values = $achieved; return true; } function getValue() { if ($this->_values === false) { return $this->getDefault(); } return $this->_values; } } class SimpleOptionTag extends SimpleWidget { function SimpleOptionTag($attributes) { $this->SimpleWidget('option', $attributes); } function setValue($value) { return false; } function isValue($compare) { $compare = trim($compare); if (trim($this->getValue()) == $compare) { return true; } return trim($this->getContent()) == $compare; } function getDefault() { if ($this->getAttribute('value') === false) { return $this->getContent(); } return $this->getAttribute('value'); } } class SimpleRadioButtonTag extends SimpleWidget { function SimpleRadioButtonTag($attributes) { $this->SimpleWidget('input', $attributes); if ($this->getAttribute('value') === false) { $this->_setAttribute('value', 'on'); } } function expectEndTag() { return false; } function setValue($value) { if ($value === false) { return parent::setValue($value); } if ($value != $this->getAttribute('value')) { return false; } return parent::setValue($value); } function getDefault() { if ($this->getAttribute('checked')) { return $this->getAttribute('value'); } return false; } } class SimpleTagGroup { var $_widgets = array(); function addWidget(&$widget) { $this->_widgets[] = &$widget; } function &_getWidgets() { return $this->_widgets; } function getAttribute($label) { return false; } function getName() { if (count($this->_widgets) > 0) { return $this->_widgets[0]->getName(); } } function isId($id) { for ($i = 0, $count = count($this->_widgets); $i < $count; $i++) { if ($this->_widgets[$i]->isId($id)) { return true; } } return false; } function isLabel($label) { for ($i = 0, $count = count($this->_widgets); $i < $count; $i++) { if ($this->_widgets[$i]->isLabel($label)) { return true; } } return false; } function write(&$encoding) { $encoding->add($this->getName(), $this->getValue()); } } class SimpleCheckboxGroup extends SimpleTagGroup { function getValue() { $values = array(); $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { if ($widgets[$i]->getValue()) { $values[] = $widgets[$i]->getValue(); } } return $this->_coerceValues($values); } function getDefault() { $values = array(); $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { if ($widgets[$i]->getDefault()) { $values[] = $widgets[$i]->getDefault(); } } return $this->_coerceValues($values); } function setValue($values) { $values = $this->_makeArray($values); if (! $this->_valuesArePossible($values)) { return false; } $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { $possible = $widgets[$i]->getAttribute('value'); if (in_array($widgets[$i]->getAttribute('value'), $values)) { $widgets[$i]->setValue($possible); } else { $widgets[$i]->setValue(false); } } return true; } function _valuesArePossible($values) { $matches = array(); $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { $possible = $widgets[$i]->getAttribute('value'); if (in_array($possible, $values)) { $matches[] = $possible; } } return ($values == $matches); } function _coerceValues($values) { if (count($values) == 0) { return false; } elseif (count($values) == 1) { return $values[0]; } else { return $values; } } function _makeArray($value) { if ($value === false) { return array(); } if (is_string($value)) { return array($value); } return $value; } } class SimpleRadioGroup extends SimpleTagGroup { function setValue($value) { if (! $this->_valueIsPossible($value)) { return false; } $index = false; $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { if (! $widgets[$i]->setValue($value)) { $widgets[$i]->setValue(false); } } return true; } function _valueIsPossible($value) { $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { if ($widgets[$i]->getAttribute('value') == $value) { return true; } } return false; } function getValue() { $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { if ($widgets[$i]->getValue()) { return $widgets[$i]->getValue(); } } return false; } function getDefault() { $widgets = &$this->_getWidgets(); for ($i = 0, $count = count($widgets); $i < $count; $i++) { if ($widgets[$i]->getDefault()) { return $widgets[$i]->getDefault(); } } return false; } } class SimpleLabelTag extends SimpleTag { function SimpleLabelTag($attributes) { $this->SimpleTag('label', $attributes); } function getFor() { return $this->getAttribute('for'); } } class SimpleFormTag extends SimpleTag { function SimpleFormTag($attributes) { $this->SimpleTag('form', $attributes); } } class SimpleFrameTag extends SimpleTag { function SimpleFrameTag($attributes) { $this->SimpleTag('frame', $attributes); } function expectEndTag() { return false; } } ?>