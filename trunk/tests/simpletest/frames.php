<?php
 require_once(dirname(__FILE__) . '/page.php'); require_once(dirname(__FILE__) . '/user_agent.php'); class SimpleFrameset { var $_frameset; var $_frames; var $_focus; var $_names; function SimpleFrameset(&$page) { $this->_frameset = &$page; $this->_frames = array(); $this->_focus = false; $this->_names = array(); } function addFrame(&$page, $name = false) { $this->_frames[] = &$page; if ($name) { $this->_names[$name] = count($this->_frames) - 1; } } function setFrame($path, &$page) { $name = array_shift($path); if (isset($this->_names[$name])) { $index = $this->_names[$name]; } else { $index = $name - 1; } if (count($path) == 0) { $this->_frames[$index] = &$page; return; } $this->_frames[$index]->setFrame($path, $page); } function getFrameFocus() { if ($this->_focus === false) { return array(); } return array_merge( array($this->_getPublicNameFromIndex($this->_focus)), $this->_frames[$this->_focus]->getFrameFocus()); } function _getPublicNameFromIndex($subject) { foreach ($this->_names as $name => $index) { if ($subject == $index) { return $name; } } return $subject + 1; } function setFrameFocusByIndex($choice) { if (is_integer($this->_focus)) { if ($this->_frames[$this->_focus]->hasFrames()) { return $this->_frames[$this->_focus]->setFrameFocusByIndex($choice); } } if (($choice < 1) || ($choice > count($this->_frames))) { return false; } $this->_focus = $choice - 1; return true; } function setFrameFocus($name) { if (is_integer($this->_focus)) { if ($this->_frames[$this->_focus]->hasFrames()) { return $this->_frames[$this->_focus]->setFrameFocus($name); } } if (in_array($name, array_keys($this->_names))) { $this->_focus = $this->_names[$name]; return true; } return false; } function clearFrameFocus() { $this->_focus = false; $this->_clearNestedFramesFocus(); } function _clearNestedFramesFocus() { for ($i = 0; $i < count($this->_frames); $i++) { $this->_frames[$i]->clearFrameFocus(); } } function hasFrames() { return true; } function getFrames() { $report = array(); for ($i = 0; $i < count($this->_frames); $i++) { $report[$this->_getPublicNameFromIndex($i)] = $this->_frames[$i]->getFrames(); } return $report; } function getRaw() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getRaw(); } $raw = ''; for ($i = 0; $i < count($this->_frames); $i++) { $raw .= $this->_frames[$i]->getRaw(); } return $raw; } function getText() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getText(); } $raw = ''; for ($i = 0; $i < count($this->_frames); $i++) { $raw .= ' ' . $this->_frames[$i]->getText(); } return trim($raw); } function getTransportError() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getTransportError(); } return $this->_frameset->getTransportError(); } function getMethod() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getMethod(); } return $this->_frameset->getMethod(); } function getUrl() { if (is_integer($this->_focus)) { $url = $this->_frames[$this->_focus]->getUrl(); $url->setTarget($this->_getPublicNameFromIndex($this->_focus)); } else { $url = $this->_frameset->getUrl(); } return $url; } function getRequestData() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getRequestData(); } return $this->_frameset->getRequestData(); } function getMimeType() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getMimeType(); } return $this->_frameset->getMimeType(); } function getResponseCode() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getResponseCode(); } return $this->_frameset->getResponseCode(); } function getAuthentication() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getAuthentication(); } return $this->_frameset->getAuthentication(); } function getRealm() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getRealm(); } return $this->_frameset->getRealm(); } function getRequest() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getRequest(); } return $this->_frameset->getRequest(); } function getHeaders() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getHeaders(); } return $this->_frameset->getHeaders(); } function getTitle() { return $this->_frameset->getTitle(); } function getAbsoluteUrls() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getAbsoluteUrls(); } $urls = array(); foreach ($this->_frames as $frame) { $urls = array_merge($urls, $frame->getAbsoluteUrls()); } return array_values(array_unique($urls)); } function getRelativeUrls() { if (is_integer($this->_focus)) { return $this->_frames[$this->_focus]->getRelativeUrls(); } $urls = array(); foreach ($this->_frames as $frame) { $urls = array_merge($urls, $frame->getRelativeUrls()); } return array_values(array_unique($urls)); } function getUrlsByLabel($label) { if (is_integer($this->_focus)) { return $this->_tagUrlsWithFrame( $this->_frames[$this->_focus]->getUrlsByLabel($label), $this->_focus); } $urls = array(); foreach ($this->_frames as $index => $frame) { $urls = array_merge( $urls, $this->_tagUrlsWithFrame( $frame->getUrlsByLabel($label), $index)); } return $urls; } function getUrlById($id) { foreach ($this->_frames as $index => $frame) { if ($url = $frame->getUrlById($id)) { if (! $url->gettarget()) { $url->setTarget($this->_getPublicNameFromIndex($index)); } return $url; } } return false; } function _tagUrlsWithFrame($urls, $frame) { $tagged = array(); foreach ($urls as $url) { if (! $url->getTarget()) { $url->setTarget($this->_getPublicNameFromIndex($frame)); } $tagged[] = $url; } return $tagged; } function &getFormBySubmit($selector) { $form = &$this->_findForm('getFormBySubmit', $selector); return $form; } function &getFormByImage($selector) { $form = &$this->_findForm('getFormByImage', $selector); return $form; } function &getFormById($id) { $form = &$this->_findForm('getFormById', $id); return $form; } function &_findForm($method, $attribute) { if (is_integer($this->_focus)) { $form = &$this->_findFormInFrame( $this->_frames[$this->_focus], $this->_focus, $method, $attribute); return $form; } for ($i = 0; $i < count($this->_frames); $i++) { $form = &$this->_findFormInFrame( $this->_frames[$i], $i, $method, $attribute); if ($form) { return $form; } } $null = null; return $null; } function &_findFormInFrame(&$page, $index, $method, $attribute) { $form = &$this->_frames[$index]->$method($attribute); if (isset($form)) { $form->setDefaultTarget($this->_getPublicNameFromIndex($index)); } return $form; } function setField($selector, $value) { if (is_integer($this->_focus)) { $this->_frames[$this->_focus]->setField($selector, $value); } else { for ($i = 0; $i < count($this->_frames); $i++) { $this->_frames[$i]->setField($selector, $value); } } } function getField($selector) { for ($i = 0; $i < count($this->_frames); $i++) { $value = $this->_frames[$i]->getField($selector); if (isset($value)) { return $value; } } return null; } } ?>