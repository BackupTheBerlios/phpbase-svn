<?php
 class SimpleTest { function getVersion() { $content = file(dirname(__FILE__) . '/VERSION'); return trim($content[0]); } function ignore($class) { $registry = &SimpleTest::_getRegistry(); $registry['IgnoreList'][] = strtolower($class); } function isIgnored($class) { $registry = &SimpleTest::_getRegistry(); return in_array(strtolower($class), $registry['IgnoreList']); } function setMockBaseClass($mock_base) { $registry = &SimpleTest::_getRegistry(); $registry['MockBaseClass'] = $mock_base; } function getMockBaseClass() { $registry = &SimpleTest::_getRegistry(); return $registry['MockBaseClass']; } function useProxy($proxy, $username = false, $password = false) { $registry = &SimpleTest::_getRegistry(); $registry['DefaultProxy'] = $proxy; $registry['DefaultProxyUsername'] = $username; $registry['DefaultProxyPassword'] = $password; } function getDefaultProxy() { $registry = &SimpleTest::_getRegistry(); return $registry['DefaultProxy']; } function getDefaultProxyUsername() { $registry = &SimpleTest::_getRegistry(); return $registry['DefaultProxyUsername']; } function getDefaultProxyPassword() { $registry = &SimpleTest::_getRegistry(); return $registry['DefaultProxyPassword']; } function setCurrent(&$test) { $registry = &SimpleTest::_getRegistry(); $registry['CurrentTestCase'] = &$test; } function &getCurrent() { $registry = &SimpleTest::_getRegistry(); return $registry['CurrentTestCase']; } function &_getRegistry() { static $registry = false; if (! $registry) { $registry = SimpleTest::_getDefaults(); } return $registry; } function _getDefaults() { return array( 'StubBaseClass' => 'SimpleStub', 'MockBaseClass' => 'SimpleMock', 'IgnoreList' => array(), 'DefaultProxy' => false, 'DefaultProxyUsername' => false, 'DefaultProxyPassword' => false); } } class SimpleTestOptions extends SimpleTest { function getVersion() { return Simpletest::getVersion(); } function ignore($class) { return Simpletest::ignore($class); } function isIgnored($class) { return Simpletest::isIgnored($class); } function setMockBaseClass($mock_base) { return Simpletest::setMockBaseClass($mock_base); } function getMockBaseClass() { return Simpletest::getMockBaseClass(); } function useProxy($proxy, $username = false, $password = false) { return Simpletest::useProxy($proxy, $username, $password); } function getDefaultProxy() { return Simpletest::getDefaultProxy(); } function getDefaultProxyUsername() { return Simpletest::getDefaultProxyUsername(); } function getDefaultProxyPassword() { return Simpletest::getDefaultProxyPassword(); } } ?>